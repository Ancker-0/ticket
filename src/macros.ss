(load "csm/csm.ss")

(library (macros)
(export char-in with-checker with-checker*
        guard <= > == or and watermark)
(import (csm)
        (except (chezscheme) guard <= > or and))
(export (import (csm)))

(define (char-in x y)
  (forsome y (lambda (z) ((op "==") x z))))

(define-syntax with-checker
  (lambda (x)
    (syntax-case x ()
      [(k name body ...)
       (with-syntax ([len (datum->syntax #'k 'len)]
                     [char-range (datum->syntax #'k 'char-range)])
         #'(let ((len (string-append (! name) ".length()"))
                 (char-range (lambda r (forall name
                                               (lambda (ch) (char-in ch (string-literal (apply string-append r))))))))
            body ...))])))

(define-syntax with-checker*
  (lambda (x)
    (syntax-case x ()
      [(k name body ...)
       (with-syntax ([len (datum->syntax #'k 'len)]
                     [char-range (datum->syntax #'k 'char-range)])
         #'(let ((len (string-append (! name) ".length()"))
                 (char-range (lambda r (forall name
                                               (lambda (ch) (char-in ch (string-literal (apply string-append r))))))))
            (and body ...)))])))

#;(define-syntax with-checker*
  (syntax-rules ()
    [(_ name body ...)
     (with-checker name
       (and body ...))]))

(define (guard fail-value expr)
  (string-append "if (not " (! expr) ")\n"
                 "  return " fail-value ";"))

(define <= (op "<="))
(define > (op ">"))
(define == (op "=="))
(define or (ops "||"))
(define and (ops "&&"))

(define (watermark)
  (format "/**
 * This file was generated by Chez Scheme
 * Generated at ~s
 **/\n" (date-and-time)))

)


;(display "macros loaded\n")
