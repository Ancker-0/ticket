#!chezscheme

(load "csm/csm.ss")

(library (macros)
(export char-in num-in with-checker with-checker*
        guard <= > == or and
        watermark watermark*
        ->string ->string!
        $f $lit
        utf8-hans-len-range
        list/range)
(import (csm)
        (except (chezscheme) guard <= > or and))
(export (import (csm)))

(define (char-in x y)
  (forsome y (lambda (z) ((op "==") x z))))

(define (num-in x l r)
  (->string! x l r)
  (and (<= l x)
       (<= x r)))

(define-syntax with-checker
  (lambda (x)
    (syntax-case x ()
      [(k name body ...)
       (with-syntax ([len (datum->syntax #'k 'len)]
                     [char-range (datum->syntax #'k 'char-range)])
         #'(let ((len (string-append (! name) ".length()"))
                 (char-range (lambda r (forall name
                                               (lambda (ch) (char-in ch (string-literal (apply string-append r))))))))
            body ...))])))

(define-syntax with-checker*
  (lambda (x)
    (syntax-case x ()
      [(k name body ...)
       (with-syntax ([len (datum->syntax #'k 'len)]
                     [char-range (datum->syntax #'k 'char-range)])
         #'(let ((len (string-append (! name) ".length()"))
                 (char-range (lambda r (forall name
                                               (lambda (ch) (char-in ch (string-literal (apply string-append r))))))))
            (and body ...)))])))

#;(define-syntax with-checker*
  (syntax-rules ()
    [(_ name body ...)
     (with-checker name
       (and body ...))]))

(define (guard fail-value expr)
  (string-append "if (not " (! expr) ")\n"
                 "  return " fail-value ";"))

(define <= (op "<="))
(define > (op ">"))
(define == (op "=="))
(define or (ops "||"))
(define and (ops "&&"))

(define (watermark)
  (format "/**
 * This file was generated by Chez Scheme
 * Generated at ~s
 * 
 * 2025 © Coffish
 **/\n" (date-and-time)))

(define (watermark* str)
  (format "/**
 * ~a
 *
 * This file was generated by Chez Scheme
 * Generated at ~s
 * 
 * 2025 © Coffish
 **/\n" str (date-and-time)))

(define (->string s)
  (cond
    [(string? s) s]
    [(symbol? s) (symbol->string s)]
    [(number? s) (number->string s)]
    [else (error '->string (format "unrecognized type of ~s" s))]))

(define-syntax ->string!
  (syntax-rules ()
    [(_ e ...)
     (begin (set! e (->string e)) ...)]))

(define-syntax $f (identifier-syntax format))
(define-syntax $lit (identifier-syntax string-literal))

(define (utf8-hans-len-range var l r) "true")

(define (list/range l r)
  (if (>= l r)
    '()
    (let loop ((lst '())
               (p (- r 1)))
      (if (< p l)
        lst
        (loop (cons p lst) (1- p))))))

)

;(display "macros loaded\n")
